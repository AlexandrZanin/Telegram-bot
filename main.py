'''–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É,
–≤ –Ω–µ–º –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã message_handler –∏ callback.
'''
from telebot import types
from loader import bot, registration
import handlers
import orm
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from calendar_my import  MyStyleCalendar
import re
from datetime import date, timedelta
from loguru import logger
from userclass import User
logger.add('loging.log', format="<green>{time:YYYY-MM-DD   HH:mm:ss.SSS}</green> {level} {message}", level="INFO")

comands_list=['/lowprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à—ë–≤—ã—Ö –æ—Ç–µ–ª–µ–π',
              '/highprice - —Ç–æ–ø —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π',
              '/bestdeal - —Ç–æ–ø –æ—Ç–µ–ª–µ–π –ø–æ —Ü–µ–Ω–µ –∏ —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞',
              '/history - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤',
              '/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫']

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è –ñ–º–∏ /help")
    logger.info("lets start")


@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, '–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.')
    bot.send_message(message.chat.id, '\n'.join(comands_list))

@bot.message_handler(commands=['lowprice'])
def lowprice_message(message):
    registration(message)
    bot.register_next_step_handler(message, handlers.check_city)
@bot.message_handler(commands=['highprice'])
def highprice_message(message):
    registration(message)
    bot.register_next_step_handler(message, handlers.check_city)
@bot.message_handler(commands=['bestdeal'])
def bestdeal_message(message):
    registration(message)
    bot.register_next_step_handler(message, handlers.check_city)

@bot.message_handler(commands=['history'])# –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
def history_message(message:types.Message):
    if orm.Guest.select():
        counter=0
        for id_request in orm.Guest.select().where(orm.Guest.user_id == message.from_user.id).order_by(orm.Guest.time_now.desc()):
            # –∏–∑ –±–∞–∑—ã –±–µ—Ä—É—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ user.id, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
            if id_request.cmd=='/bestdeal':
                text_button="–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {time_now}\n–ö–æ–º–∞–Ω–¥–∞: {cmd}\n–ì–æ—Ä–æ–¥: {sity}\n–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {in_date}\n–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {out_date}\
                \n–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {min_price}-{max_price} {currency}\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {max_dist}".\
                    format(time_now=id_request.time_now[:-7], cmd=id_request.cmd, sity=id_request.sity,
                           in_date=id_request.date_in, out_date=id_request.date_out, min_price=id_request.low_price,
                           max_price=id_request.top_price, max_dist=id_request.max_dist, currency=id_request.currency)
            else:
                text_button="–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {time_now}\n–ö–æ–º–∞–Ω–¥–∞ {cmd}\n–ì–æ—Ä–æ–¥: {sity}\n–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {in_date}\n–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {out_date}". \
                    format(time_now=id_request.time_now[:-7], cmd=id_request.cmd, sity=id_request.sity, in_date=id_request.date_in,
                           out_date=id_request.date_out,)
            handlers.get_keyboard(data='id' + str(id_request.id), text=text_button, message=message)
            counter+=1
            if counter==5:
                break
        if counter==1:ending=""
        elif counter==5:ending="–æ–≤"
        else:ending="–∞"

        bot.send_message(message.chat.id, text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ {} –∑–∞–ø—Ä–æ—Å{}".format(counter, ending), reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, text="–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")

@bot.message_handler(commands=['stop'])
def stop_message(message):
    bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫',
                     reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(message.chat.id, '\n'.join(comands_list))
    logger.info("User {} press stop".format(message.from_user.id))


@bot.message_handler(content_types='text')
def some_text(message:types.Message):
    user=User.get_user(message.chat.id)
    if message.text=='–î–∞':
        user.foto=True
        bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å (–Ω–µ –±–æ–ª—å—à–µ 10)?',
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_count_foto)
    elif message.text == '–ù–µ—Ç':
        handlers.get_hotels(message)
    elif message.text=='RUB':
        user.currency='RUB'
        handlers.calendar_func_in(message.chat.id)
    elif message.text=='USD':
        user.currency='USD'
        handlers.calendar_func_in(message.chat.id)
    elif message.text=='EUR':
        user.currency='EUR'
        handlers.calendar_func_in(message.chat.id)
    else:
        bot.send_message(message.chat.id, 'ü§î –ù–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–∂–º–∏ /help')


@bot.callback_query_handler(func=lambda call: call.data.startswith('yes'))
def callback_worker(query):
    if query.data == "yes":  # call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
        user=User.get_user(query.message.chat.id)
        user.foto=True
        bot.send_message(query.message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å (–Ω–µ –±–æ–ª—å—à–µ 10)?',
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(query.message, handlers.get_hotels)

@bot.callback_query_handler(func=lambda call: call.data.startswith('no'))
def callback_worker(query):
    if query.data=="no":
        handlers.get_hotels(query.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith('again'))#–∫–Ω–æ–ø–∫–∞ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥
def callback_worker(query):
    if query.data=='again':
        bot.send_message(query.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(query.message, handlers.check_city)

@bot.callback_query_handler(func=lambda call: re.search(r'^\d', call.data))#–∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
def callback_worker(query):
    user=User.get_user(query.message.chat.id)
    user.sity_id=query.data
    user.sity=user.city_name_id[user.sity_id]
    bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                          text='–í—ã –≤—ã–±—Ä–∞–ª–∏ {}'.format(user.sity))
    # handlers.calendar_func_in(query.message.chat.id)
    keyboard=types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.row('RUB', 'USD', 'EUR')
    question='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É?'
    bot.send_message(query.message.chat.id, text=question, reply_markup=keyboard)
        # bot.register_next_step_handler(query.message, get_date_in)

@bot.callback_query_handler(func=lambda call: re.search(r'[id]\d+', call.data))#–∫–Ω–æ–ø–∫–∞ "—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ" –≤ history
def callback_worker(query):
    query.data=int(query.data[2:])
    for hotel in orm.Hotels_find.select().where(orm.Hotels_find.owner_id==query.data):
        handlers.send_info(hotel)

@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def cal(c):
    user=User.get_user(c.message.chat.id)
    if not user.date_in:
        result, key, step =  MyStyleCalendar(min_date=date.today(), max_date=date(2023, 12, 31), locale='ru').process(c.data)
        if not result and key:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                                       c.message.chat.id,
                                       c.message.message_id,
                                       reply_markup=key)
        elif result:
            bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}",
                                   c.message.chat.id,
                                   c.message.message_id)
            user.date_in=result
            handlers.calendar_func_out(c.message.chat.id)
    else:
        result, key, step=MyStyleCalendar(min_date=user.date_in+timedelta(days=+1), max_date=date(2023, 12, 31), locale='ru').process(c.data)
        if not result and key:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                               c.message.chat.id,
                               c.message.message_id,
                               reply_markup=key)
        elif result:

            bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}",
                               c.message.chat.id,
                               c.message.message_id)
            user.date_out=result
            if user.cmd == '/bestdeal':
                bot.send_message(c.message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∑–∞ –Ω–æ—á—å –≤ {} (priceMin-priceMax)'.
                                 format(user.currency),
                                 reply_markup=types.ReplyKeyboardRemove())
                bot.register_next_step_handler(c.message, get_price_range)
            else:
                bot.send_message(c.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–æ–¥–∏—Ç—å? (–ù–µ –±–æ–ª—å—à–µ 10)',
                                 reply_markup=types.ReplyKeyboardRemove())
                bot.register_next_step_handler(c.message, get_hotels_count)


def get_hotels_count(message:types.Message):
    user=User.get_user(message.chat.id)
    if message.text=='/stop':
        bot.register_next_step_handler(message, stop_message)
    if message.text.isdigit(): #–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        hotel_count=int(message.text)
        if hotel_count<=10:
            user.count_hotels=message.text
            keyboard=types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard.row('–î–∞', '–ù–µ—Ç')
            question='–í—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ?'
            bot.send_message(message.chat.id, text=question, reply_markup=keyboard)
        elif hotel_count>10:
            bot.reply_to(message, '–ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑')
            bot.register_next_step_handler(message, get_hotels_count)
    else:
        bot.reply_to(message, '–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑' )
        bot.register_next_step_handler(message, get_hotels_count)

def get_max_dist(message:types.Message):
    user=User.get_user(message.chat.id)

    if re.findall('\A\d+\Z', message.text) or re.findall('^\d+[.,]+\d+', message.text): #—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω—É —á–∏—Å–ª–æ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ
        user.max_dist=message.text
        bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –≤—ã–≤–æ–¥–∏—Ç—å? (–ù–µ –±–æ–ª—å—à–µ 10)')
        bot.register_next_step_handler(message, get_hotels_count)
    else:
        bot.reply_to(message, '–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(message, get_max_dist)

def get_price_range(message:types.Message):
    if re.search('^\d+[-]\d+', message.text): # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω –ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ —à–∞–±–ª–æ–Ω—É XXX-XXX
        user=User.get_user(message.chat.id)
        user.low_price=re.findall(r'\d+', message.text)[0]
        user.top_price=re.findall(r'\d+', message.text)[1]
        if user.low_price==user.top_price:# –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–ª–∞
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000-2000)')
            bot.register_next_step_handler(message, get_price_range)
        else:
            if int(user.low_price) > int(user.top_price):  #—Å–æ—Ä—Ç–∏—Ä—É–µ–º, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –º–∏–Ω>–º–∞–∫—Å
                user.low_price, user.top_price=user.top_price, user.low_price
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 0,5)')
            bot.register_next_step_handler(message, get_max_dist)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000-2000)')
        bot.register_next_step_handler(message, get_price_range)

def get_count_foto(message:types.Message):
    user=User.get_user(message.chat.id)
    if message.text.isdigit():
        hotel_count=int(message.text)
        if hotel_count <= 10:
            user.foto_count=message.text
            handlers.get_hotels(message)
        elif hotel_count > 10:
            bot.reply_to(message, '–ß–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑')
            bot.register_next_step_handler(message, get_count_foto)
    else:
        bot.reply_to(message, '–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑')
        bot.register_next_step_handler(message, get_count_foto)
if __name__ == '__main__':
    bot.infinity_polling()
